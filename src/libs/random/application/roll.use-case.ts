import { UseCase } from '@/libs/shared/workflow'
import { useRandomReplica } from '@/libs/shared/random'
import { gcd } from '@/libs/shared/math'

export const ROLL_COMMAND = '/roll'

export type RollInput = {
  message?: string
}
const rollReplica = useRandomReplica({
  replicas: [
    '–í–∞–Ω–≥—É—é, —á—Ç–æ %message% —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %prob%% üîÆ',
    '–ù–∞—à —Å–µ–Ω—Å–µ–π —Å–¥–µ–ª–∞–µ—Ç —Ö–∞—Ä–∞–∫–∏—Ä–∏ —Å–≤–æ–µ–π –∫–∞—Ç–∞–Ω–æ–π –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ üç£. –ê –≤–æ—Ç –≤–∞—à–µ "%message%" ‚Äî %prob%%',
    '–ü–æ–∫–∞ –Ω–∏–Ω–¥–∑—è ü•∑üèª –Ω–∞ –∫—É—Ö–Ω–µ –≤–∞—Ä–∏—Ç –º–∏—Å–æ-—Å—É–ø üçú, —à–∞–Ω—Å, —á—Ç–æ %message% —Ä–∞–≤–µ–Ω %prob%%',
    '–ü–æ–∫–∞ –Ω–∞—à –∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–π —Ä–µ–º–±–æ –Ω–∞–¥–µ–µ—Ç—Å—è, —á—Ç–æ –æ–Ω —Å–º–æ–∂–µ—Ç –∏–∑–±–∏—Ç—å –Ω—É–Ω—á–∞–∫–∞–º–∏ —Å—Ç–µ–Ω—É, –º—ã –ø–æ—Å—á–∏—Ç–∞–ª–∏, —á—Ç–æ %message% –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ %fraction% üßÆ',
    '–ù–∞—à–∞ —Ä—É—á–Ω–∞—è —è–∫—É–¥–∑–∞ —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ %message% –±—É–¥–µ—Ç —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %prob%% ü•∑üèª',
  ],
  placeholders: ['message', 'prob', 'fraction'],
})

export const rollUseCase =
  (): UseCase<RollInput> =>
  async ({ input: { message } }) => {
    const prob = Math.round(Math.random() * 100)

    const divider = gcd(prob, 100)
    const fraction = `${prob / divider} —Å–ª—É—á–∞–µ–≤ –∏–∑ ${100 / divider}`

    if (!message) return { message: `${prob}%` }

    return {
      message: rollReplica({ message, prob: prob.toString(10), fraction }),
    }
  }
